/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Title = string;
export type Subtitle = string;
/**
 * The basic style of the map.
 */
export type MapStyle =
  | "streets-v12"
  | "outdoors-v12"
  | "light-v11"
  | "dark-v11"
  | "satellite-v9"
  | "satellite-streets-v12"
  | "navigation-day-v1"
  | "navigation-night-v1";
export type ShowLegend = boolean;
/**
 * If true, the map automatically keeps the drawn locations in focus.
 */
export type AutoFollow = boolean;
/**
 * The name for this data series
 */
export type SeriesLabel = string;
/**
 * Create the specified type of layer on the map.
 */
export type LayerType = "circle" | "symbol" | "heatmap" | "line";
/**
 * Restrict the number of rows for this dataseries to the given number of newest values. (If you use split data, then per each of the split dataseries.)
 */
export type LatestValues = number;
/**
 * Blur of 1 means the whole circle is blurred starting from the center point. Blur 0 means no blur effect.
 */
export type Blur = number;
/**
 * Opactity 1 means fully opaque, 0 means fully transparent.
 */
export type Opacity = number;
export type TextSize = number;
export type TextSize1 = number;
/**
 * For available icons check the maki icon set here https://labs.mapbox.com/maki-icons/
 */
export type IconName = "marker" | "car-front" | "car-top";
/**
 * In multiples of the original icon size
 */
export type IconSize = number;
/**
 * The higher the intensity, the more 'hot' the heatmap becomes. The value is a multiple with default value 1. e.g. to double the intensitiy choose 2.
 */
export type Intensity = number;
export type Opacity1 = number;
/**
 * The radius will be combined with the data value to to determine the heat radius of a point.
 */
export type RadiusBaseSize = number;
export type LineWidth = number;
/**
 * For available icons check the maki icon set here https://labs.mapbox.com/maki-icons/
 */
export type IconName1 = "marker" | "car-front" | "car-top";
/**
 * In multiples of the original icon size
 */
export type IconSize1 = number;
export type Longitude = number;
export type Latitude = number;
export type Altitude = number;
export type DataPointValue = number;
/**
 * You can specify a column in the input data to autogenerate dataseries for each distinct entry in this column. E.g. if you have a table with columns [city, lon, lat, temperature] and specify 'city' as split column, then you will get a layer for each city.
 */
export type SplitDataBy = string;
/**
 * This is the map data
 */
export type MapData = {
  lon?: Longitude;
  lat?: Latitude;
  alt?: Altitude;
  value?: DataPointValue;
  pivot?: SplitDataBy;
  [k: string]: unknown;
}[];
export type Dataseries = {
  label?: SeriesLabel;
  type?: LayerType;
  color?: LayerBaseColor;
  latestValues?: LatestValues;
  circleConfig?: CircleLayerConfiguration;
  symbolConfig?: SymbolLayerConfiguration;
  heatmapConfig?: HeatmapLayerConfiguration;
  lineConfig?: TrackLayerConfiguration;
  data?: MapData;
  [k: string]: unknown;
}[];

/**
 * A map-chart
 */
export interface InputData {
  title?: Title;
  subTitle?: Subtitle;
  style?: MapStyle;
  showLegend?: ShowLegend;
  follow?: AutoFollow;
  dataseries?: Dataseries;
  [k: string]: unknown;
}
export interface LayerBaseColor {
  [k: string]: unknown;
}
export interface CircleLayerConfiguration {
  "circle-blur"?: Blur;
  "circle-opacity"?: Opacity;
  "text-color"?: TextColor;
  "text-size"?: TextSize;
  [k: string]: unknown;
}
export interface TextColor {
  [k: string]: unknown;
}
export interface SymbolLayerConfiguration {
  "text-color"?: TextColor1;
  "text-size"?: TextSize1;
  "icon-image"?: IconName;
  "icon-size"?: IconSize;
  [k: string]: unknown;
}
export interface TextColor1 {
  [k: string]: unknown;
}
export interface HeatmapLayerConfiguration {
  "heatmap-intensity"?: Intensity;
  "heatmap-opacity"?: Opacity1;
  "heatmap-radius"?: RadiusBaseSize;
  [k: string]: unknown;
}
export interface TrackLayerConfiguration {
  "line-width"?: LineWidth;
  "icon-image"?: IconName1;
  "icon-size"?: IconSize1;
  [k: string]: unknown;
}

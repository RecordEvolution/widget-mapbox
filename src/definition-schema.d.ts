/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Title = string;
export type Subtitle = string;
/**
 * The basic style of the map.
 */
export type MapStyle =
  | "streets-v12"
  | "outdoors-v12"
  | "light-v11"
  | "dark-v11"
  | "satellite-v9"
  | "satellite-streets-v12"
  | "navigation-day-v1"
  | "navigation-night-v1";
export type ShowLegend = boolean;
/**
 * If true, the map automatically keeps the drawn locations in focus.
 */
export type AutoFollow = boolean;
/**
 * The name for this data series
 */
export type SeriesLabel = string;
/**
 * Create the specified type of layer on the map.
 */
export type LayerType = "circle" | "symbol" | "heatmap" | "line";
export type LayerBaseColor = string;
/**
 * Restrict the number of rows for this dataseries to the given number of newest values. (If pivoted, then per each of the pivot dataseries.)
 */
export type LatestValues = number;
export type Blur = number;
export type Opacity = number;
export type TextColor = string;
export type TextSize = number;
/**
 * For available icons check the maki icon set here https://labs.mapbox.com/maki-icons/
 */
export type IconName =
  | "marker"
  | "airfield"
  | "airport"
  | "alcohol-shop"
  | "america-football"
  | "amusement-park"
  | "aquarium"
  | "art-gallery"
  | "bakery"
  | "bank"
  | "bar"
  | "baseball"
  | "basketball"
  | "beer"
  | "bicycle"
  | "building"
  | "bus"
  | "cafe"
  | "campsite"
  | "car"
  | "cemetery"
  | "cinema"
  | "circle"
  | "college"
  | "commerical"
  | "cricket"
  | "cross"
  | "dam"
  | "danger"
  | "dog-park"
  | "embassy"
  | "emergency-telephone"
  | "entrance"
  | "farm"
  | "fast-food"
  | "ferry"
  | "fire-station"
  | "fuel"
  | "garden"
  | "golf"
  | "grocery-store"
  | "hairdresser"
  | "harbor"
  | "heart"
  | "heliport"
  | "hospital"
  | "industrial"
  | "information"
  | "laundry"
  | "library"
  | "lighthouse"
  | "lodging"
  | "logging"
  | "london-underground"
  | "marker-stroked"
  | "minefield"
  | "mobile-phone"
  | "monument"
  | "mountain"
  | "museum"
  | "music"
  | "oil-well"
  | "park"
  | "parking"
  | "parking-garage"
  | "pharmacy"
  | "picnic-site"
  | "pitch"
  | "place-of-worship"
  | "playground"
  | "police"
  | "polling-place"
  | "post"
  | "prison"
  | "rail"
  | "rail-above"
  | "rail-light"
  | "rail-metro"
  | "rail-underground"
  | "railway"
  | "religious-christian"
  | "religious-jewish"
  | "religious-muslim"
  | "religious-islam"
  | "restaurant"
  | "roadblock"
  | "rocket"
  | "school"
  | "scooter"
  | "shop"
  | "skiing"
  | "slaughterhouse"
  | "soccer"
  | "square"
  | "stadium"
  | "star"
  | "star-stroked"
  | "suitcase"
  | "swimming"
  | "table-tennis"
  | "teahouse"
  | "tennis"
  | "theatre"
  | "toilet"
  | "town-hall"
  | "trash"
  | "tree-1"
  | "tree-2"
  | "triangle"
  | "triangle-stroked"
  | "veterinary"
  | "volcano"
  | "warehouse"
  | "waste-basket"
  | "water"
  | "wetland"
  | "zoo";
/**
 * In multiples of the original icon size
 */
export type IconSize = number;
/**
 * The higher the intensity, the more 'hot' the heatmap becomes. The value is a multiple with default value 1. e.g. to double the intensitiy choose 2.
 */
export type Intensity = number;
export type Opacity1 = number;
/**
 * The radius will be combined with the data value to to determine the heat radius of a point.
 */
export type RadiusBaseSize = number;
export type LineWidth = number;
export type Longitude = number;
export type Latitude = number;
export type Altitude = number;
export type AValueForTheDataPoint = number;
/**
 * You can specify a column in the input data to autogenerate dataseries for each distinct entry in this column. E.g. if you have a table with columns [city, lon, lat, temperature] and specify 'city' as pivot column, then you will get a layer for each city.
 */
export type PivotColumn = string;
/**
 * This is the map data
 */
export type MapData = {
  lon: Longitude;
  lat: Latitude;
  alt?: Altitude;
  value?: AValueForTheDataPoint;
  pivot?: PivotColumn;
  [k: string]: unknown;
}[];
export type Dataseries = {
  label: SeriesLabel;
  type: LayerType;
  color?: LayerBaseColor;
  latestValues?: LatestValues;
  config?: LayerConfiguration;
  data?: MapData;
  [k: string]: unknown;
}[];

/**
 * A map-chart
 */
export interface MapConfiguration {
  /**
   * Settings
   */
  settings?: {
    title?: Title;
    subTitle?: Subtitle;
    style: MapStyle;
    showLegend?: ShowLegend;
    follow?: AutoFollow;
    [k: string]: unknown;
  };
  dataseries?: Dataseries;
  [k: string]: unknown;
}
export interface LayerConfiguration {
  circle?: CircleLayer;
  symbol?: TextLayer;
  heatmap?: HeatmapLayer;
  line?: TrackLayer;
  [k: string]: unknown;
}
export interface CircleLayer {
  "circle-blur"?: Blur;
  "circle-opacity"?: Opacity;
  [k: string]: unknown;
}
export interface TextLayer {
  "text-color"?: TextColor;
  "text-size"?: TextSize;
  "icon-image"?: IconName;
  "icon-size"?: IconSize;
  [k: string]: unknown;
}
export interface HeatmapLayer {
  "heatmap-intensity"?: Intensity;
  "heatmap-opacity"?: Opacity1;
  "heatmap-radius"?: RadiusBaseSize;
  [k: string]: unknown;
}
export interface TrackLayer {
  "line-width"?: LineWidth;
  [k: string]: unknown;
}
